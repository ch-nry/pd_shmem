name: Build Pure-Data externals

on: [push, pull_request]

env:
  PD_VERSION: 0.51-4

jobs:
      
  build_ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - name: Clone Pure-Data
      run: git clone --branch=${PD_VERSION} --depth=1 https://github.com/pure-data/pure-data.git
    
    - name: Install Dependencies
      run: |
        sudo apt-get install -yqq ninja-build cmake
    
    - name: Build
      run: |
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
        cmake --build build
        cmake --build build --target install

    - name: Archive Package
      uses: actions/upload-artifact@v2
      with:
        name: share_mem
        path: build/package/share_mem
    
  build_macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Clone Pure-Data
      run: git clone --branch=${PD_VERSION} --depth=1 https://github.com/pure-data/pure-data.git

    - name: Install Dependencies
      run: |
        brew install ninja cmake

    - name: Build
      run: |
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
        cmake --build build
        cmake --build build --target install  
   
    - name: Archive Package
      uses: actions/upload-artifact@v2
      with:
        name: share_mem
        path: build/package/share_mem

  build_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Download Pure-Data Binaries
      run: |
        Invoke-WebRequest -Uri "http://msp.ucsd.edu/Software/pd-${env:PD_VERSION}-i386.msw.zip" -OutFile "pd-${env:PD_VERSION}-i386.msw.zip"
        Expand-Archive -Path "pd-${env:PD_VERSION}-i386.msw.zip" -DestinationPath .

    - name: Build
      run: |
        cmake -S . -B build -DPUREDATA_INCLUDE_DIRS="pd-${env:PD_VERSION}-i386/src" -DPUREDATA_LIB="pd-${env:PD_VERSION}-i386/bin/pd.lib" -A Win32
        cmake --build build --config Release
        cmake --build build --config Release --target install

    - name: Archive Package
      uses: actions/upload-artifact@v2
      with:
        name: share_mem
        path: build/package/share_mem

  build_windows_x64:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Download Pure-Data Binaries
      run: |
        Invoke-WebRequest -Uri "http://msp.ucsd.edu/Software/pd-${env:PD_VERSION}.msw.zip" -OutFile "pd-${env:PD_VERSION}.msw.zip"
        Expand-Archive -Path "pd-${env:PD_VERSION}.msw.zip" -DestinationPath .

    - name: Build
      run: |
        cmake -S . -B build -DPUREDATA_INCLUDE_DIRS="pd-${env:PD_VERSION}/src" -DPUREDATA_LIB="pd-${env:PD_VERSION}/bin/pd.lib" -A x64
        cmake --build build --config Release
        cmake --build build --config Release --target install

    - name: Archive Package
      uses: actions/upload-artifact@v2
      with:
        name: share_mem
        path: build/package/share_mem

  build-rpi:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Clone Pure-Data
      run: git clone --branch=${PD_VERSION} --depth=1 https://github.com/pure-data/pure-data.git

    - name: Install Dependencies
      run: |
        sudo apt-get update && sudo apt-get upgrade -yqq
        sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt-get install -yqq git build-essential cmake gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf ninja-build puredata

    - name: Build
      run: ./cross_compile_rpi.sh

    - name: Archive Package
      uses: actions/upload-artifact@v2
      with:
        name: share_mem
        path: build/package/share_mem

  package_release:
    runs-on: ubuntu-latest
    needs: [ build_ubuntu, build_macos, build_windows, build_windows_x64, build-rpi ]
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: share_mem
          path: share_mem
      - name: Rezip
        shell: bash
        run: |
          ls
          SHORT=${GITHUB_REF:11} # remove the 'refs/tags/' prefix
          SLUG=${SHORT//\//_} # replace '/' with '_'
          zip -r share_mem-${SLUG}.zip share_mem
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: share_mem*.zip

  upload_to_deken:
    runs-on: ubuntu-latest
    needs: [ build_ubuntu, build_macos, build_windows, build_windows_x64, build-rpi ]
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: share_mem-src
      - uses: actions/download-artifact@v2
        with:
          name: share_mem
          path: share_mem
      - name: Create Deken Package
        shell: bash
        env:
          DEKEN_USERNAME: ${{ secrets.DEKEN_USERNAME }}
          DEKEN_PASSWORD: ${{ secrets.DEKEN_PASSWORD }}
        run: |
          SHORT=${GITHUB_REF:11} # remove the 'refs/tags/' prefix
          SLUG=${SHORT//\//_} # replace '/' with '_'
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD --volume ${PWD}/share_mem-src:/share_mem registry.git.iem.at/pd/deken deken upload -v "${SLUG}" /share_mem
          docker run --rm -e DEKEN_USERNAME -e DEKEN_PASSWORD --volume ${PWD}/share_mem:/share_mem     registry.git.iem.at/pd/deken deken upload --no-source-error -v "${SLUG}" /share_mem